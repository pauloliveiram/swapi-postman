pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("The response has all expected properties", () => {
    const responseJson = pm.response.json();

    pm.expect(responseJson.count).to.be.a('number');
    pm.expect(responseJson.next).to.include('https://swapi.dev/api/planets/?page=');
    pm.expect(responseJson.previous).to.be.null;
    pm.expect(responseJson.results).to.be.an('array');
    pm.expect(responseJson.results[0].name).to.be.a('string');
    pm.expect(responseJson.results[0].rotation_period).to.be.a('string');
    pm.expect(responseJson.results[0].orbital_period).to.be.a('string');
    pm.expect(responseJson.results[0].diameter).to.be.a('string');
    pm.expect(responseJson.results[0].climate).to.be.a('string');
    pm.expect(responseJson.results[0].gravity).to.be.a('string');
    pm.expect(responseJson.results[0].terrain).to.be.a('string');
    pm.expect(responseJson.results[0].surface_water).to.be.a('string');
    pm.expect(responseJson.results[0].population).to.be.a('string');
    pm.expect(responseJson.results[0].residents).to.be.a('array');
    pm.expect(responseJson.results[0].residents[0]).to.include('https://swapi.dev/api/people/');
    pm.expect(responseJson.results[0].films).to.be.an('array');
    pm.expect(responseJson.results[0].films[0]).to.include('https://swapi.dev/api/films/');
    pm.expect(responseJson.results[0].created).to.be.a('string');
    pm.expect(responseJson.results[0].edited).to.be.a('string');
    pm.expect(responseJson.results[0].url).to.include('https://swapi.dev/api/planets/');
})